/*
** exp_complete_l1.c for 42sh in /home/person_l
** 
** Made by Louis Person
** Login   <person_l@epitech.net>
** 
** Started on  Fri May 22 20:16:06 2015 Louis Person
** Last update Fri May 22 20:48:44 2015 Louis Person
*/

#include <stdio.h>
#include "tokenizer/token.h"
#include "my/my.h"
#include "parser/parser.h"
#include "ast.h"

int			parse_exp_complete_l1(struct s_iterator *i,
					      struct s_btree *parent)
{
  struct s_btree	*left;
  struct s_token	*token;
  struct s_btree	*right;
  struct s_ast_node	*ast;

  if (!HAS_NEXT(i))
    return (fprintf(stderr, "Error: ran out of tokens\n"), -1);
  if (btree_new(&left) == -1)
    return (-1);
  btree_init(left, NULL, NULL, NULL);
  btree_set_tree(parent, LEFT, left);
  if (ast_node_new(&ast) == -1)
    return (fprintf(stderr, "error: cannot create ast\n"));
  ast->type = TEMPTY;
  btree_set(left, ast);
  if (parse_exp_complete(i, left) == -1)
    return (-1);
  if (!HAS_NEXT(i))
    return (0);
  token = PEEK(i);
  if (token->type == TT_SEMICOLON)
    {
      if (btree_new(&right) == -1)
	return (-1);
      btree_init(right, NULL, NULL, NULL);
      btree_set_tree(parent, RIGHT, right);
      if (parse_exp_compose(i, right) == -1)
	return (-1);
    }
  else
    return (fprintf(stderr, "error: unexpected token \"%s\"\n", token->string._string), -1);
  return (0);
}


